[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fit mit Markdown",
    "section": "",
    "text": "Einleitung\nQuarto, RMarkown und Jupyter Notebooks haben eine Sache gemeinsam. Sie sind Computational Notebooks. Das heisst, sie sind eine Mischung aus Fliesstext und Code. Der Fliesstext wird in einerm Markupsprache namens Markdown geschrieben, der Code kann in einer beliebigen Programmiersprache geschrieben werden, typischerweise verwendet man aber Python, R oder Julia.\nDiese Computational Notebooks werden mittels einer Software typischerweise in HTML oder PDF konvertiert. Möglich sind aber auch andere Formate wie epub (EBook) oder Docx. Dieses System eignet sich sehr gut, um Datenanalysen zu dokumentieren und zu publizieren. Es eignet sich aber auch sehr gut, um Unterrichtsmaterialien zu erstellen.\nSeit ein paar Jahren verwenden wir Quarto für die Bereitstellung von Unterrichtsunterlagen an die Studierenden. Der Umstieg von klassischen Systemen wie Microsoft Word ist nicht ganz einfach. Da wir in vielen Fällen mit anderen Personen zusammenarbeiten, haben wir diese Anleitung geschrieben um den Einstieg zu erleichtern.Mittlerweile sind im Netz zahlreiche Anleitung, Videos und ander Ressourcen verfügbar. Unsere, also die vorliegende Anleitung, soll spezifisch für ZHAW Mitarbeit hilfreich sein, den Einstieg zu machen. Dabei werden wir punktuell auf solche Ressourcen verweisen, dabei aber sehr spezifisch sein.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.html#wie-funktioniert-quarto",
    "href": "index.html#wie-funktioniert-quarto",
    "title": "Fit mit Markdown",
    "section": "Wie funktioniert Quarto?",
    "text": "Wie funktioniert Quarto?\nWie Eingangs erwähnt, funktionieren die verschiedenen Computational Notebook Systeme sehr ähnlich. Um möglichst Konkret zu sein, werden wir uns vor allem auf Quarto in Kombination mit R und den Output Formaten HTML und PDF konzentrieren.\nIn einem Textfile mit der Erweiterung .qmd werden Fliesstext und Code gemischt. Der Fliesstext wird in Markdown geschrieben, der Code in einer beliebigen Programmiersprache. Das R Package knitr führt den Code aus und erstellt ein neues Markdown File wo der Fliesstext und die Resultate des Codes zusammengeführt werden. Dieses File wiederum wird mittels der Software pandoc (welche mit Quarto mitgeliefert wird) in das gewünschte Format konvertiert.\n\n\n\n\n\n\n\nHinweis\n\n\n\nIm letzten Schritt werden, je nach Output Format, ebenfalls temporäre Files erstellt. Beispielweise wird für die Erstellung eines PDF Files ein LaTeX File erstellt (.tex), welches dann mittel xelatex in ein PDF File konvertiert wird. Latex ist zwar mächtig, aber auch sehr komplex. Wir hoffen, dass Latex mittelfristig durch typst ersetzt wird, siehe quarto.org.",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "index.html#setup",
    "href": "index.html#setup",
    "title": "Fit mit Markdown",
    "section": "Setup",
    "text": "Setup\nEs gibt eine unendliche Anzahl von verschiedenen möglichen Setups denkbar. Hier ein paar Beispiele, die wir an der ZHAW nutzen und empfehlen:\n\nEditor: RStudio, VSCode oder JupyterLab\nInstallation:\n\nLokal: Via Software Center oder interim Admin\nCloud: Lösungen gibt es für RStudio (siehe ?sec-cloud-rstudio), VSCode (siehe ?sec-cloud-vscode) und für JupyterLab (siehe ?sec-cloud-jupyterlab)\n\nProgrammiersprache: R oder Python",
    "crumbs": [
      "Einleitung"
    ]
  },
  {
    "objectID": "github-account.html",
    "href": "github-account.html",
    "title": "1  GitHub Account erstellen",
    "section": "",
    "text": "Die Macht von git kommt vor allem zu tragen, wenn das repo mit einem Git Server Synchronisiert wird. Dazu brauchen wir einen Account bei einem Git-Cloud-Anbieter1. Für Research Methods Statistik Unterlagen brauchen wir dazu github.com.\nLegen Sie ein Github-Konto auf github.com an (das ist natürlich kostenlos). Verwenden Sie dabei Ihre ZHAW E-Mail-Adresse. Der Benutzername ist allerdings frei Wählbar. Hier ein paar Vorschläge für die Nahmenswahl:\n\nIhren tatsächlichen Namen einzubauen ist nett, die Leute wollen wissen, mit wem sie es zu tun haben\nWählen Sie einen Namen, den Sie einem Mitarbeiter oder Vorgesetzten ruhig verraten können\nkürzer ist besser als länger\nWählen Sie einen zeitlosen Namen (z. B. nicht den Namen Ihrer Universität)\n\n\n\n\n\n\n\nVerschiedene Git Servers mehrere GitHub Accounts\n\n\n\nWenn ihr verschiedene git-Servers benutzt oder auf github.com verschiedene Accounts habt, emfehlen wir entweder:\n\nÜberall die gleiche Mailadresse (z.B. die ZHAW Mailadresse) zu verwenden oder\nDie ZHAW Mailadresse überall als als sekundäre Mailadresse zu hinterlegen.\n\n\n\n\n\n\n\n\nZum Beispiel: github.com, gitlab.com, bitbucket.com, oder github.zhaw.ch.↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>GitHub Account erstellen</span>"
    ]
  },
  {
    "objectID": "github-codespaces.html",
    "href": "github-codespaces.html",
    "title": "2  GitHub Codespace",
    "section": "",
    "text": "GitHub Codespace ersetzt das lokale Aufsetzen von RStudio, Git, GitHub und R-Paketen durch eine virtuelle Entwicklungsumgebung, die direkt in GitHub gehostet wird. Die Codespace-Instanz wird automatisch mit dem Repository verknüpft, sodass Sie direkt in der Cloud arbeiten können. Sie können Codespaces auch mit anderen teilen, um die Zusammenarbeit zu erleichtern.\n\nSchritt 1: Um auf Research Methods Statistik Unterlagen in Codespaces Zuzugreifen, kann man den folgenden URL benutzen: https://codespaces.new/ResearchMethods-ZHAW/Statistik\nSchritt 2: Die Default Einstellungen können so mit “Create Codespace” bestätigt werden (siehe Abbildung 2.1)\nSchritt 3: Nach ein paar Sekunden - Minuten ist die Virtuelle Umgebung bereit\n\n\n\n\n\n\n\n\nAbbildung 2.1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>GitHub Codespace</span>"
    ]
  },
  {
    "objectID": "qmd-editieren.html#text",
    "href": "qmd-editieren.html#text",
    "title": "3  Qmd editieren",
    "section": "3.1 Text",
    "text": "3.1 Text\nKursiv, fett, durchgestrichen, Code, und Links können wie folgt erstellt werden:\n\n\n\nInput\nOutput\n\n\n\n\n*kursiv*\nkursiv\n\n\n**fett**\nfett\n\n\n~~durchgestrichen~~\ndurchgestrichen\n\n\n`Code`\nCode\n\n\n[ZHAW](https://www.zhaw.ch)\nZHAW\n\n\n&lt;https://www.zhaw.ch&gt;\nhttps://www.zhaw.ch\n\n\n\n\n\n\n\n\n\nHinweis\n\n\n\nMehr zum Markdown Syntax: https://quarto.org/docs/authoring/markdown-basics.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Qmd editieren</span>"
    ]
  },
  {
    "objectID": "qmd-editieren.html#überschriften",
    "href": "qmd-editieren.html#überschriften",
    "title": "3  Qmd editieren",
    "section": "3.2 Überschriften",
    "text": "3.2 Überschriften\nÜberschriften werden mit vorangestelltem # erstellt\n\nKapitel: # Programmieren I\nUnterkapitel: ## Komplexe Datentypen\nUnter-Unterkapitel: ### Integer und Floats\n… usw. (bis Stufe 6)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Qmd editieren</span>"
    ]
  },
  {
    "objectID": "qmd-editieren.html#sec-querverweise",
    "href": "qmd-editieren.html#sec-querverweise",
    "title": "3  Qmd editieren",
    "section": "3.3 Querverweise",
    "text": "3.3 Querverweise\nUm im Text einen Querverweis auf ein Kapitel zu machen, müsst ihr diesem Zuerst eine eindeutige “ID” geben. Zum Beispiel sieht der Titel dieses Kapitels folgendermassen aus:\n## Querverweise {#sec-querverweise}\nNun kann ich auf dieses Kapitel mit @sec-querverweise verweisen.\n\n\n\nTabelle 3.1: Querverweise\n\n\n\n\n\n\n\n\n\nInput:\nOutput:\n\n\n@sec-querverweise\nKapitel 3.3\n\n\n@fig-zhaw-logo\nAbbildung 3.1\n\n\n@tbl-beispielstabelle\nsiehe Tabelle 3.2\n\n\n\n\n\n\nDas Verweisen funktioniert aber nur auf Nummerierte Kapitel und deren Unterkapitel. Wichtig ist auch, das ein sec- vorangestellt wird. Dieses sec- kommuniziert Quarto, dass es sich bei der Referenz um einen Kapitelverweis handelt. Bilder werden mit fig- referenziert und Tabellen mit tbl-. Mehr dazu später, in Kapitel 3.4 und Kapitel 3.5.\n\n\n\n\n\n\nHinweis\n\n\n\nMehr zu Querverweisen: https://quarto.org/docs/authoring/cross-references.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Qmd editieren</span>"
    ]
  },
  {
    "objectID": "qmd-editieren.html#sec-md-tables",
    "href": "qmd-editieren.html#sec-md-tables",
    "title": "3  Qmd editieren",
    "section": "3.4 Tabellen",
    "text": "3.4 Tabellen\nTabellen werden ebenfalls im Markdown-Syntax erstellt, und zwar folgendermassen:\n| BMI         | Nutritional status       | \n|:------------|:-------------------------|\n| Below 18.5  | Underweight              |\n| 18.5–24.9   | Normal weight            |\n| 25.0–29.9   | Pre-obesity              |\n| 30.0–34.9   | Obesity class I          |\n| 35.0–39.9   | Obesity class II         |\n| Above 40    | Obesity class III        |\n\n: WHO Nutritional status {#tbl-beispielstabelle}\nDiese obige Markdown tabelle wird in eine html Tabelle umgewandelt. Diese Markdown Tabelle muss nicht von hand erstellt werden, auf tablesgenerator.com können bestehende Tabellen in den Markdown Syntax konvertiert werden.\n\n\n\nTabelle 3.2: WHO Nutritional status\n\n\n\n\n\nBMI\nNutritional status\n\n\n\n\nBelow 18.5\nUnderweight\n\n\n18.5–24.9\nNormal weight\n\n\n25.0–29.9\nPre-obesity\n\n\n30.0–34.9\nObesity class I\n\n\n35.0–39.9\nObesity class II\n\n\nAbove 40\nObesity class III\n\n\n\n\n\n\nBeachtet, dass man eine Tabellenüberschrift nach einen : anbringen kann. Nach der Tabellenüberschrift kann man einen “Key” erstellen, mit dem man diese Tabelle referenzieren kann. Der “Key” muss\n\nnach der Tabellenüberschrift angebracht werden (mit leerschlag!)\nsich in geschweiften Klammern ({ und }) befinden\nmit #tbl- beginnen\n\nNun kann man sich im Text auf diese Tabelle beziehen (siehe Tabelle 3.1)\n\n\n\n\n\n\nHinweis\n\n\n\nMehr zum einfügen von Tabellen: https://quarto.org/docs/authoring/tables.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Qmd editieren</span>"
    ]
  },
  {
    "objectID": "qmd-editieren.html#sec-md-images",
    "href": "qmd-editieren.html#sec-md-images",
    "title": "3  Qmd editieren",
    "section": "3.5 Bilder",
    "text": "3.5 Bilder\nUm Bilder einzufügen muss man diese erstmals auf Github hochladen. Dafür wählt man auf Github.com den “Parent Folder” des Dokuments, wo das Bild hin soll und dort dann Add file &gt; Upload file. Nun kann man das Bild folgendermasen einfügen:\n\nNur Bild: ![](bild.jpg)\nBild mit Bildunterschrift: ![Hier kommt die Bildunterschrift ](bild.jpg)\nBild mit Querverweis: ![Bildunterschrift](bild.jpg){#fig-test}\n\n![Logo der ZHAW](zhaw_lsfm_iunr_blau.jpg){#fig-zhaw-logo}\nWird dann zu:\n\n\n\n\n\n\nAbbildung 3.1: Logo der ZHAW\n\n\n\nSiehe Tabelle 3.1\n\n\n\n\n\n\nHinweis\n\n\n\nMehr zum einfügen von Bildern: https://quarto.org/docs/authoring/figures.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Qmd editieren</span>"
    ]
  },
  {
    "objectID": "qmd-editieren.html#hervorhebungen-kästchen",
    "href": "qmd-editieren.html#hervorhebungen-kästchen",
    "title": "3  Qmd editieren",
    "section": "3.6 Hervorhebungen (Kästchen)",
    "text": "3.6 Hervorhebungen (Kästchen)\nDie ganze Hinweis-kästchen in diesem Dokument werden mit folgendem Syntax erstellt:\n:::{.callout-note}\nMehr zu diesen sogenannten *Callout Blocks*: &lt;https://quarto.org/docs/authoring/callouts.html&gt;\n:::\nDies wir dann zu:\n\n\n\n\n\n\nHinweis\n\n\n\nMehr zu diesen sogenannten Callout Blocks: https://quarto.org/docs/authoring/callouts.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Qmd editieren</span>"
    ]
  },
  {
    "objectID": "vorschau-erstellen.html",
    "href": "vorschau-erstellen.html",
    "title": "4  Vorschau erstellen",
    "section": "",
    "text": "Wir empfehlen, dass ihr beim Editieren von Quarto Files immer eine Live Vorschau in html offen habt. Auch dann, wenn ihr als Output pdf gewählt habt. Der Grund dafür ist, dass HTML viel schneller kompiliert wird als PDF.\nUm eine Vorschau zu erstellen empfehlen wir, im Terminal den Befehl quarto preview auszuführen. Dieser Befehl erstellt eine Vorschau in html und öffnet diese in eurem Browser.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Vorschau erstellen</span>"
    ]
  },
  {
    "objectID": "publish.html#sec-share-source",
    "href": "publish.html#sec-share-source",
    "title": "5  Änderungen hochladen / teilen",
    "section": "5.1 Änderungen an den Source Files",
    "text": "5.1 Änderungen an den Source Files\nUm die Änderungen an den Source Files zu teilen müsst ihr diese via git auf das Repository “pushen”. Vorher aber müsst ihr die Änderungen stageen, comitten und dann pushen. Ich empfehle, dass ihr zumindest zu beginn dafür ein Graphical User Interface verwendet.\nIn GitHub Codespaces befindet sich das Git-Interface im Tab “Source Control”. Dabei müssen folgende Schritte ausgeführt werden:\n\nStagen: Klick auf das +-Symbol beim entsprechenden File (im Terminal mit git add .)\nCommit: “Message” eingeben und Klick auf den Button “Commit” (im Terminal mit git commit -m \"deine message\")\nPull/Push: Klick auf den Button “Sync Changes” (im Terminal mit git pull und git push)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Änderungen veröffentlichen</span>"
    ]
  },
  {
    "objectID": "publish.html#sec-share-target",
    "href": "publish.html#sec-share-target",
    "title": "5  Änderungen hochladen / teilen",
    "section": "5.2 Änderungen an den Target Files",
    "text": "5.2 Änderungen an den Target Files\nGrundsätzlich müssen die Änderungen der Target Files (pdf/html) ebenfall mit dem Git-Repository synchronisiert werden. In Research Methods Statistik Unterlagen haben wir das Projekt jedoch so aufgesetzt, dass die Target Files automatisch bei jedem Commit neu generiert werden. Das bedeutet, dass wir die Target Files nicht explizit synchronisieren müssen.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Änderungen veröffentlichen</span>"
    ]
  },
  {
    "objectID": "inhalte-erstellen.html",
    "href": "inhalte-erstellen.html",
    "title": "6  Neue Inhalte hinzufügen",
    "section": "",
    "text": "Die meisten Inhalte exisitieren bereits und ihr müsst sie nur noch anpassen. Falls ihr aber ein neues .Qmd File erstellen möchtet, müsst ihr einen Unterordner in einem der Ordner erstellen.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Neue Inhalte hinzufügen</span>"
    ]
  },
  {
    "objectID": "faq.html#wie-funktioniert-quarto-wirklich",
    "href": "faq.html#wie-funktioniert-quarto-wirklich",
    "title": "7  FAQ",
    "section": "7.1 Wie funktioniert Quarto wirklich?",
    "text": "7.1 Wie funktioniert Quarto wirklich?\nAngenommen, wir haben folgendes Quarto-File:\n\n\n\nindex.qmd\n\n---\nformat: \n    html:\n        keep-md: true\n        minimal: true\n---\n\nFliesstext wird in *Markdown* geschrieben.\n\n```{r}\nSys.Date()\n```\n\n```{r}\nplot(1:10, (1:10)^2)\n```\n\n\nWenn wir den Befehl quarto render ausführen, erstellt knitr ein Markdown file mit dem Namen index.html.md, welches folgendermassen aussieht:\n(keep-md sorgt dafür, dass das Markdown-File nicht gelöscht wird, minimal sorgt dafür, dass das resultierende HTML-File etwas simpler wird)\n\n\n\nindex.html.md\n\n---\nformat: \n    html:\n        keep-md: true\n        minimal: true\n---\n\n\n\nFliesstext wird in *Markdown* geschrieben.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.Date()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-11-23\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(1:10, (1:10)^2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nDer Output aus dem ersten Chunk ist text (das Aktuelle Datum), dieser kann direkt in Markdown eingefügt werden. Der Output aus dem zweiten Chunk ist ein Plot: Dieser wird mit R gerendert, an einem geeigneten Ort abgespeichert und dann in Markdown verlinkt. Die Software pandoc nimmt dann index.html.md und wandelt es in index.html um, welches folgendermassen aussieht:\n\n\n\nindex.html (nur der &lt;body&gt;-Teil)\n\n&lt;body&gt;\n    &lt;p&gt;Fliesstext wird in &lt;em&gt;Markdown&lt;/em&gt; geschrieben.&lt;/p&gt;\n    &lt;div class=\"cell\"&gt;\n        &lt;div class=\"sourceCode cell-code\" id=\"cb1\"&gt;\n            &lt;pre\n                class=\"sourceCode r\"&gt;&lt;code class=\"sourceCode r\"&gt;&lt;span id=\"cb1-1\"&gt;&lt;a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"&gt;&lt;/a&gt;&lt;span class=\"fu\"&gt;Sys.Date&lt;/span&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n        &lt;/div&gt;\n        &lt;div class=\"cell-output cell-output-stdout\"&gt;\n            &lt;pre&gt;&lt;code&gt;[1] \"2023-11-23\"&lt;/code&gt;&lt;/pre&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"cell\"&gt;\n        &lt;div class=\"sourceCode cell-code\" id=\"cb3\"&gt;\n            &lt;pre\n                class=\"sourceCode r\"&gt;&lt;code class=\"sourceCode r\"&gt;&lt;span id=\"cb3-1\"&gt;&lt;a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"&gt;&lt;/a&gt;&lt;span class=\"fu\"&gt;plot&lt;/span&gt;(&lt;span class=\"dv\"&gt;1&lt;/span&gt;&lt;span class=\"sc\"&gt;:&lt;/span&gt;&lt;span class=\"dv\"&gt;10&lt;/span&gt;, (&lt;span class=\"dv\"&gt;1&lt;/span&gt;&lt;span class=\"sc\"&gt;:&lt;/span&gt;&lt;span class=\"dv\"&gt;10&lt;/span&gt;)&lt;span class=\"sc\"&gt;^&lt;/span&gt;&lt;span class=\"dv\"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\n        &lt;/div&gt;\n        &lt;div class=\"cell-output-display\"&gt;\n            &lt;p&gt;&lt;img src=\"index_files/figure-html/unnamed-chunk-2-1.png\" width=\"672\"&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n\nWie wir sehen, wird der Text Markdown im HTML-File mit &lt;em&gt; umschlossen, während der Plot mit &lt;img&gt; eingefügt wird.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#fehlermeldungen",
    "href": "faq.html#fehlermeldungen",
    "title": "7  FAQ",
    "section": "7.2 Fehlermeldungen",
    "text": "7.2 Fehlermeldungen\n\n7.2.1 ERROR: SyntaxError: Unexpected token &lt; in JSON at position 2\nNach ausführen von quarto preview erhalte ich den obigen Fehler. Der output im Terminal sieht folgendermassen aus:\n[54/59] fallstudie_n/1_Vorbemerkung.qmd\n[55/59] fallstudie_n/2_Datenverarbeitung_Uebung.qmd\n[56/59] fallstudie_n/2_Datenverarbeitung_Loesung.qmd\nERROR: SyntaxError: Unexpected token &lt; in JSON at position 2\nIch kann den Fehler beheben, indem ich quarto render das-letzte-qmd-file-vor-der-fehlermeldung.qmd ausführe. In dem obigen Fall also:\nquarto render fallstudie_n/2_Datenverarbeitung_Loesung.qmd\n\n\n7.2.2 error: Your local changes to the following files would be overwritten by merge:\nBei einem git pull kann es zu folgender Fehlermeldung kommen.\nerror: Your local changes to the following files would be overwritten by merge:\n        prepro/Prepro1_Demo.qmd\n        ...\nPlease commit your changes or stash them before you merge.\nAborting\nDies bedeutet, dass das genannte File (bzw. die genannten Files) auf Github in Konfikt stehehen könnten mit dem File (bzw. den Files) bei dir auf der Festplatte. Um allfällige Konflikte zu lösen, müssen die lokalen Änderungen zuerst gestageed und dann commited werden. Anschliessend können die Änderungen von Github heruntergeladen werden.\ngit add \"*.qmd\"                # staged alle Files mit der Endung .qmd\ngit commit -m \"meine message\" \ngit pull                       # lädt die Änderungen von Github herunter\n\n\n7.2.3 You have divergent branches and need to specify how to reconcile them\n\ngit pull\nhint: You have divergent branches and need to specify how to reconcile them.\nhint: You can do so by running one of the following commands sometime before\nhint: your next pull:\nhint: \nhint:   git config pull.rebase false  # merge (the default strategy)\nhint:   git config pull.rebase true   # rebase\nhint:   git config pull.ff only       # fast-forward only\nhint: \nhint: You can replace \"git config\" with \"git config --global\" to set a default\nhint: preference for all repositories. You can also pass --rebase, --no-rebase,\nhint: or --ff-only on the command line to override the configured default per\nhint: invocation.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#wie-löse-ich-einen-merge-conflict",
    "href": "faq.html#wie-löse-ich-einen-merge-conflict",
    "title": "7  FAQ",
    "section": "7.3 Wie löse ich einen merge-conflict?",
    "text": "7.3 Wie löse ich einen merge-conflict?\nTBD",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#warum-ist-datasets-ein-separates-git-repo",
    "href": "faq.html#warum-ist-datasets-ein-separates-git-repo",
    "title": "7  FAQ",
    "section": "7.4 Warum ist datasets ein separates Git-Repo?",
    "text": "7.4 Warum ist datasets ein separates Git-Repo?\n\nDie Datensätze sind häufig ein paar megabyte gross. In der Vergangenheit haben kleine Änderungen an diesen Files das Repo extrem ge-bloatet (vergrössert)\nDie Datenstäze sind teilweise vertraulich und sollten nicht öffentlich geteilt werden (das entsprechende Repo ist private) → dies sollte sich in Zukunft hoffentlich ändern (OER!)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>FAQ</span>"
    ]
  }
]