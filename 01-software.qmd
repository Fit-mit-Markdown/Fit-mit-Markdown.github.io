# Software aufsetzen

## R, RStudio und Git

Die drei genannten Programme sind zentral, um mit Quarto arbeiten zu können. Allerdings kann man RStudio auch gut durch eine andere IDE oder einerm einfachen Texteditor ersetzen (VSCode, Sublime). Allerdings empfehlen wir dies eher für Fortgeschrittene benutzer. 

Die drei Programme muss man nicht zwingend lokal installieren, es gibt auch Cloud Lösungen, welche alle drei Programme als Dienst anbieten. Eine dieser Dienste ist [Posit Cloud](https://posit.cloud/). Die ZHAW selbst hat ebenfalls eine RStudio Cloud Lösung für Mitarbeiter und Studierende. Allerdings ist diese zur Zeit des schreibens (Ende 2023) noch im Umbruch und es ist nicht klar, wie diese Lösung in Zukunft aussehen wird. Aktuell ist sie noch unter <https://statistik-ide.zhaw.ch/> erreichbar.

Wer hingegen Lokal auf seinem eingenen PC arbeiten will, muss eine aktuell version von R, RStudio und Git installieren. Siehe dazu folgende Anleitungen von @bryan2017:

- [happygitwithr: Install or upgrade R and RStudio](https://happygitwithr.com/install-r-rstudio.html)
- [happygitwithr: Install Git](https://happygitwithr.com/install-git.html)

## RStudio Konfigurieren

Wir empfehlen folgende Konfiguration in RStudio (Tools → `Global Options`):



+-----------+-----------------------------------+--------------------------+
| RMarkdown | Show document outline by default  | checked[^outline]        |
+           +-----------------------------------+--------------------------+
|           | Soft-wrap R Markdown files        | checked[^wrap]           |
+           +-----------------------------------+--------------------------+
|           | Show in document outline          | Sections Only[^outline2] |
+           +-----------------------------------+--------------------------+
|           | Show output preview in            | Window[^preview]         |
+           +-----------------------------------+--------------------------+
|           | Show equation and image previews  | In a popup               |
+           +-----------------------------------+--------------------------+
|           | Evaluate chunks in directory      | Document                 |
+-----------+-----------------------------------+--------------------------+
| Code      | Default Text Encoding             | UTF-8                    |
+-----------+-----------------------------------+--------------------------+


[^outline]: Stellt ein Inhaltsverzeichnis rechts von .Qmd files dar
[^wrap]: macht autmatische Zeilenumbrüche bei .Qmd files
[^outline2]: zeigt nur "Sections" im Inhaltsverzeichnis
[^preview]: beim kopilieren von Qmd Files wird im Anschluss ein Popup mit dem Resultat dargestellt



## Git konfigurieren

### Email / Benutzername

Um `git` benutzen zu können, muss man Benutzernamen und Mailadresse festlegen. Allenfalls habt ihr das schon gemacht. Wenn folgende Befehle (im *Terminal*!) euren Nutzernamen / Mailadresse anzeigen, könnt ihr diesen Schritt überspringen:

```{.bash}
git config --global user.email
git config --global user.name
```

Falls die obigen Befehle nichts ausgeben, müsst ihr euren Namen und eure Mailadresse noch festlegen. **Dabei ist es wichtig, dass ihr die gleiche Mailadresse verwendet, wie ihr sie auch für GitHub angegeben habt**. Um euren Namen und eure Mailadresse festzulegen, führt folgende Befehle (wieder im Terminal) aus:

```{.bash}
git config --global user.name "Jane Doe"           # <1> 
git config --global user.email "jane@example.com"  # <2>
git config --global --list                         # <3> 
```
1. Ersetzt Jane Doe durch euren Namen
2. Nutzt wenn möglich eure ZHAW Mailadresse
3. Zeigt die Konfiguration an


:::{.callout-note}
# Verschiedene Git Server oder Accounts

Jetzt wird es ein bisschen haarig: github.com ist nur eine von vielen Möglichkeiten, das lokale `git`-Repo mit einem Server zu Synchronisieren. Weitere Möglichkeiten sind z.B. *gitlab.com* oder *bitbucket.com*, oder *github.zhaw.ch*. Für Lehre benutzen und empfehlen wir *github.com*, für Forschung *github.zhaw.ch*. Wenn ihr verschiedene `git`-Servers benutzt oder auf *github.com* verschiedene Accounts habt, müsst ihr entweder überall die gleiche Mailadresse verwenden, oder `user.email` für jedes lokale Repo separat festlegen. 

Dafür müsst ihr folgende Befehle im Terminal ausführen:

```sh
git config user.name "Jane Doe"
git config user.email "jane@example.com"
git config --list
```

**Wir empfehlen jedoch, insbesondere für Anfänger, überall eure ZHAW-Mailadresse zu verwenden. Tipp: Ihr könnt auf github.com auch mehrere Mailadressen hinterlegen.**

:::
 
Weitere Informationen in @bryan2017: [Introduce yourself to Git](https://happygitwithr.com/hello-git.html).


### Authentifizierung

Als nächstes müssen wir das lokale Git mit GitHub verbinden und euren Computer dazu berechtigen, Code in euer GitHub repository zu pushen. Für diesen Schritt gibt es zwei mögliche Technologien: HTTPS und SSH. @bryan2017 [empfiehlt für Anfänger, HTTPS zu nutzen](https://happygitwithr.com/https-pat#https-vs-ssh), und an diese Empfehlung halten wir uns auch. 

Wie ihr diesen Schritt macht, ist in @bryan2017 ebenfalls gut beschrieben: [happygitwithr - Cache credentials for HTTPS](https://happygitwithr.com/https-pat).



